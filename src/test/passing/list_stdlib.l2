type List<a> {
  Cons(a, List<a>),
  Nil()
}

let map : forall a b. (a -> b) -> List<a> -> List<b> =
  letrec map = \f. \xs. match xs {
    List::Nil() => List::Nil(),
    List::Cons(h, t) => List::Cons(f h, map f t),
  } in
  map;

let foldr : forall a b. (a -> b -> a) -> a -> List<b> -> a =
  letrec foldr = \f. \acc. \xs. match xs {
    List::Nil() => acc,
    List::Cons(h, t) => foldr f (f acc h) t
  } in
  foldr;

let foldl : forall a b. (a -> b -> b) -> b -> List<a> -> b =
  letrec foldl = \f. \acc. \xs. match xs {
    List::Nil() => acc,
    List::Cons(h, t) => f h (foldl f acc t)
  } in
  foldl;

let reverse : Int =
  foldr (\xs. \x. List::Cons(x, xs)) List::Nil();

let list_concat : forall a. List<a> -> List<a> -> List<a> =
  \xs. \ys. foldl (\x. \acc. List::Cons(x, acc)) ys xs;

let list_to_string : forall a. (a -> String) -> List<a> -> String =
  \format. \xs.
    match xs {
      List::Nil() => "[]",
      List::Cons(h, t) =>
        let els = foldr (\acc. \el. concat (concat acc ", ") (format el)) (format h) t in
        concat "[ " (concat els " ]")
    };