module Option

type T<a> {
  Some(a),
  None()
}

let flat_map: forall a b. (a -> T<b>) -> T<a> -> T<b> =
  \f. \o.
    match o {
      T::Some(a) => f a,
      T::None() => T::None()
    };

let map: forall a b. (a -> b) -> T<a> -> T<b> =
  \f. flat_map \a. T::Some(f a);

let get_or_else: forall a. a -> T<a> -> a =
  \default. \o.
    match o {
      T::Some(a) => a,
      T::None() => default
    };