type List {
    Cons(Int, List),
    Nil()
}

let map : (Int -> Int) -> List -> List =
  \f.
    let mapr =
      \mapr. \xs.
        if isEmpty xs
          then List::Nil()
          else List::Cons(f (head xs), mapr (tail xs),) in
    fix mapr;

let sum: Int -> Int =
  let sumr = \f. \x. if eq x 0 then 0 else add x (f (sub x 1)) in
  fix sumr;


let main: Int =
  let cons = \x. \xs. List::Cons(x, xs) in
  let l = cons 1 (cons 2 (cons 3 (cons 4 List::Nil()))) in
  map sum l;