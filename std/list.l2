module List

import Option as O

type List<a> {
  Cons(a, List::List<a>),
  Nil()
}

let head: forall a. List::List<a> -> Option::Option<a> =
  \xs. match xs {
    List::List::Nil() => Option::Option::None(),
    List::List::Cons(h, _) => Option::Option::Some(h),
  };

let cons: forall a. a -> List::List<a> -> List::List<a> =
  \x. \xs. List::List::Cons(x, xs);

let map : forall a b. (a -> b) -> List::List<a> -> List::List<b> =
  letrec go = \f. \xs. match xs {
    List::List::Nil() => List::List::Nil(),
    List::List::Cons(h, t) => List::List::Cons(f h, go f t),
  } in
  go;