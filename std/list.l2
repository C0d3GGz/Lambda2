module List

import Option as O

type List<a> {
  Cons(a, List<a>),
  Nil()
}

let head: forall a. List<a> -> O::Option<a> =
  \xs. match xs {
    List::Nil() => O::Option::None(),
    List::Cons(h, _) => O::Option::Some(h),
  };

let cons: forall a. a -> List<a> -> List<a> =
  \x. \xs. List::Cons(x, xs);

let map : forall a b. (a -> b) -> List<a> -> List<b> =
  letrec go = \f. \xs. match xs {
    List::Nil() => List::Nil(),
    List::Cons(h, t) => List::Cons(f h, go f t),
  } in
  go;