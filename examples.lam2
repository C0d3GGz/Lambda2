type List<a> {
  Cons(a, List<a>),
  Nil()
}

let map: Int =
  letrec map = \f. \xs.
    match xs {
      List::Cons(h, t) => List::Cons(f h, map f t),
      List::Nil() => List::Nil()
    } in map;

let main: Int =
  letrec sum = \xs.
    match xs {
      List::Cons(h, t) => add h (sum t),
      List::Nil() => 0
    } in

    map (add 2) List::Cons(1, List::Nil());